const char *cstring = "<!DOCTYPE html>\n"
"<html>\n"
"\n"
"<head>\n"
"<link href=\"https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900\" rel=\"stylesheet\">\n"
"<link href=\"https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css\" rel=\"stylesheet\">\n"
"<link href=\"https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css\" rel=\"stylesheet\">\n"
"<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui\">\n"
"<style>\n"
".noselect {\n"
"-webkit-touch-callout: none;\n"
"-webkit-user-select: none;\n"
"user-select: none;\n"
"}\n"
"h1, h2{\n"
"text-align: center;\n"
"}\n"
"</style>\n"
"</head>\n"
"\n"
"<body>\n"
"<div id=\"app\">\n"
"<v-app>\n"
"<v-main>\n"
"<v-container>\n"
"<v-row justify=\"center\">\n"
"<v-col cols=\"11\">\n"
"<h1>\n"
"Sliders Tomasito\n"
"</h1>\n"
"</v-col>\n"
"<v-col cols=\"5\">\n"
"<v-slider vertical max=\"1\" min=\"-1\" v-model=\"sliderleft\" thumb-label\n"
"ticks @mouseup=\"resetLeft()\"></v-slider>\n"
"</v-col>\n"
"<v-col cols=\"5\">\n"
"<v-slider color=\"error\" track-color=\"error\" vertical max=\"1\" min=\"-1\"\n"
"v-model=\"sliderright\" thumb-label ticks @mouseup=\"resetRight()\"></v-slider>\n"
"</v-col>\n"
"<v-col cols=\"10\">\n"
"<h2 style>Motores</h2>\n"
"</v-col>\n"
"<v-col class=\"ma-5 d-flex justify-center\" cols=\"10\">\n"
"<v-chip class=\"ma-5\" color=\"primary\">Izquierdo: {{sliderleft}}</v-chip>\n"
"<v-chip class=\"ma-5\" color=\"error\">Derecho: {{sliderright}}</v-chip>\n"
"</v-col>\n"
"</v-row>\n"
"</v-container>\n"
"</v-main>\n"
"</v-app>\n"
"</div>\n"
"\n"
"<script src=\"https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js\"></script>\n"
"<script src=\"https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js\"></script>\n"
"<script src=\"https://unpkg.com/mqtt/dist/mqtt.min.js\"></script>\n"
"<script>\n"
"new Vue({\n"
"el: \"#app\",\n"
"vuetify: new Vuetify(),\n"
"created() {\n"
"setInterval(() => {\n"
"console.log(\"Left: \", this.sliderleft, \" Right: \", this.sliderright);\n"
"}, 200);\n"
"},\n"
"mounted() {\n"
"this.createConnection();\n"
"},\n"
"data() {\n"
"return {\n"
"message: \"Hola Mundo!!\",\n"
"sliderleft: 0,\n"
"sliderright: 0,\n"
"connection: {\n"
"host: \"broker.emqx.io\",\n"
"port: 8083,\n"
"endpoint: \"/mqtt\",\n"
"clean: true, // Reserved session\n"
"connectTimeout: 4000, // Time out\n"
"reconnectPeriod: 4000, // Reconnection interval\n"
"// Certification Information\n"
"clientId: \"mqttjs_3be2c321\",\n"
"username: \"emqx_test\",\n"
"password: \"emqx_test\",\n"
"},\n"
"subscription: {\n"
"topic: \"topic/mqttx\",\n"
"qos: 0,\n"
"},\n"
"publish: {\n"
"topic: \"topic/browser\",\n"
"qos: 0,\n"
"payload: \"Hello World!!\",\n"
"},\n"
"receiveNews: \"\",\n"
"qosList: [{\n"
"label: 0,\n"
"value: 0\n"
"},\n"
"{\n"
"label: 1,\n"
"value: 1\n"
"},\n"
"{\n"
"label: 2,\n"
"value: 2\n"
"},\n"
"],\n"
"client: {\n"
"connected: false,\n"
"},\n"
"subscribeSuccess: false,\n"
"}\n"
"},\n"
"methods: {\n"
"resetLeft() {\n"
"this.sliderleft = 0;\n"
"},\n"
"resetRight() {\n"
"this.sliderright = 0;\n"
"},\n"
"// Create connection\n"
"createConnection() {\n"
"const {\n"
"host,\n"
"port,\n"
"endpoint,\n"
"...options\n"
"} = this.connection\n"
"const connectUrl = `ws://${host}:${port}${endpoint}`\n"
"try {\n"
"this.client = mqtt.connect(connectUrl, options)\n"
"console.log(this.client);\n"
"} catch (error) {\n"
"console.log(\"mqtt.connect error\", error)\n"
"}\n"
"this.client.on(\"connect\", () => {\n"
"console.log(\"Connection succeeded!\")\n"
"})\n"
"this.client.on(\"error\", error => {\n"
"console.log(\"Connection failed\", error)\n"
"})\n"
"this.client.on(\"message\", (topic, message) => {\n"
"this.receiveNews = this.receiveNews.concat(message)\n"
"console.log(`Received message ${message} from topic ${topic}`)\n"
"})\n"
"},\n"
"}\n"
"});\n"
"</script>\n"
"</body>\n"
"\n"
"</html>";
